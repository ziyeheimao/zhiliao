// scss使用声明 → <style lang="scss">
// 导入scss语法 导入外部scss文件 → @import "@style/style.scss";


// scss语法1: 注释
  /* 1.此注释编译后css中显示 */
  // 2.此注释编译后css中不显示
  /*! 3.重要注释！即使是压缩模式编译，也会保留这行注释，通常可以用于声明版权信息 */


// scss语法2: $ 声明变量
  // 1.声明: 声明变量的语法是: $变量名: 变量值
  // 2.区分: 
      // 2.1 变量的尾添加 !default 给未通过 !default 声明赋值的变量赋值时 如变量已被赋值 不再被重新赋值 但如变量未被赋值 则会被赋予新值
      // 2.2 
  // 3.默认: 默认变量只需要在变量值后加上 !default 用来设置默认值 对默认变量进行重新声明可以实现覆盖默认值
  // 4.覆盖: 全局变量是元素外声明的变量 局部变量是在元素里声明的变量 重复声明时局部变量会覆盖全局变量
  // 5.提升局部为全局变量: 局部变量值后加上 !global 关键词可以使得局部变量变成全局变量
  // 6.嵌套引用: 即字符串插值 需要使用 #{} 来进行包裹 例: border-#{$left}:2px solid purple; # 使用字符串插值之前必须先声明
  // 7.计算:
      // 7.1 插值语法中计算 → height: #{$w2*2}px;  // ($w2:100)
      // 7.2 直接计算字符串 → height: $w3*2;  // ($w3:200px)


// scss语法2: 运算
  // 1.数字的加减乘除、取整等运算 + - * / % 如果单位不同会转换不同单位的值后运算
  // 2.关系运算 < > <= >= 也可用于数字运算
  // 3.相等运算 == != 可用于所有数据类型
  // 4.颜色值运算 颜色运算是分段计算的 分别计算红色 绿色 蓝色的值
    // rgba 或 hsla 两种颜色值 必须拥有相等的 alpha 值才能进行运算 因为算术运算不会作用于(透明度) alpha 值
  // 5.字符串运算 + 可用于连接字符串 运算结果是否有 '' 取决于 + 左侧的字符串
  // 6.支持布尔型的 and or 以及 not 运算
  // 7.数组不支持任何运算方式，只能使用 list functions 控制
  // 8.圆括号 () 可以用来 提高括号内的运算优先级


// scss语法3: 嵌套语法 & 引用父元素
  // 1.选择器嵌套
      // ul>li:nth-child(3){
      //   height: $w3*2;
      //   div {
      //     background: #fbb;
      //     p {
      //       color: green;
      //     }
      //   }
      // }
    // 嵌套时候可以使用 & 来引用父元素
      // div {
      //   & > p {   // 可以编译成CSS的 div > p {} 效果
      //      color: purple;
      //   }
      // }
  // 2.属性嵌套
      // .funky {
      //   font: { // 自动编译成 font-size ...
      //     family: fantasy;
      //     size: 30em;
      //     weight: bold;
      //   }
      // }
  // 2.1命名空间也可以包含自己的属性值，例如：
      // .funky {
      //   font: 20px/24px {
      //     family: fantasy;
      //     weight: bold;
      //   }
      // }


// scss语法4: 继承 .class 使用 @extend
      // .red{
      //   color: red;
      // }
      // table{
      //   @extend .red; // 这里table将继承.red下的样式
      // }


// SCSS语法5: 占位符 %
  // 使用 % 开头 声明的代码块 如不被 @extend 调用就不会被编译 编译出来的代码会将相同的代码合并在一起 代码变得十分简洁
      // %m5 { background-color: #000; }
      // .P1 { @extend %m5; }


// SCSS语法6: 混合
  // 1.封装: 重复代码块 使用混合@mixin命令定义
  // 2.调用: 使用@include调用该mixin
  // 3.传参: 在使用@mixin和@include时 传入参数和默认值

      // 封装: 使用@mixin命令定义可重复使用的代码块
      // @mixin normalStyle {
      //   width: 300px;
      //   height: 100px;
      //   color: black;
      //   background-color:lightblue;
      // }

      // 调用: 使用@include 命令引用@mixin定义的代码块
      // .container {
      //   @include normalStyle;
      // }

      // 传参及默认值
      // @mixin normalStyle($width,$height,$color:red) {
      //   width:$width;
      //   height:$height;
      //   color:$color;
      // }
      // .container {
      //   @include normalStyle(300px,100px,green,lightgray);
      // }


// SCSS语法7: 循环语句
  // 1.for循环
      // 在sass中的@for循环有两种方式
      // 1.1 @for $i from <start> through <end>
      // 1.2 @for $i from <start> to <end>
      // 其中$i表示变量 start表示开始值 end表示结束值
      // through表示包括end这个数值 to表示不包括end这个数值

        // for 循环例子
        // @for $i from 1 to 5 {
        //   .item-#{$i} {
        //     border:#{$i}px solid;
        //   }
        // }

  // 2.while循环
      // 只要@while后面的条件为true就会执行 直到表达式值为false时停止循环

        // while 循环例子
        // $m:8;
        // @while $m > 0 {
        //   .items-#{$m} {
        //       width:2em*$m;
        //   }
        //   $m: $m - 2;
        // }
        // 这里可以对$m进行运算 让它每次都减去2

  // 3.each in循环
      // 遍历一个列表 从列表中取出对应值 指令形式 @each $var in <list>($var为变量值，list为sassscript表达式）

        // each 语法例子
        // @each $item in class01,class02 { //$item就是遍历了in关键词后面的类名列
        //   .#{$item} {
        //     background-color:purple;
        //   }
        // }
        //会编译成 .class01 , .class02 {background-color:purple;}


// SCSS语法8: 条件分支语句
      // p {
      //   @if 1+1<3 {
      //       border:1px solid blue;
      //   } @else if 2 + 2 == 4 {
      //       border:1px solid red;
      //   }
      //     @else {
      //       border:1ps dashed palevioletred;
      //   }
      // }


// SCSS语法9: 函数 使用@function 自定义函数及使用
      //  @function double($sn){ // SCSS允许自定义函数
      //     @return $sn*2;
      //  }
      //  .myText {
      //     width:double(200px); // 使用在SCSS中自定义的函数
      //  }


// SCSS 内置的颜色函数
  // .myText {
  //   color:black;
  //   &:hover{
  //     // 以下的lighten()、darken() 等是SCSS内置的颜色函数
  //     color:lighten(#cc3, 10%); // #d6d65c颜色变浅
  //     color:darken(#cc3, 10%); // #a3a329颜色加深
  //     color:grayscale(#cc3); // #d6d65c灰度
  //     color:complement(#cc3); // #a3a329反色(补码)
  //   }
  // }


// scss语法3: List (相当于js中的数组) 定义列表
  // #列表索引是从1开始 列表长度length($list) 获取列表项nth($list, 1)
  // 1.在Scss中括号不是用来创建列表（除非是空的列表），而是用来做为分隔符
  // 2.和CSS一样，只要没有特殊字符，列表项的引号是可以省略的

      // $list: 'item-1', 'item-2', 'item-3'; //（推荐）
      // $list-space1: 'item-1'  'item-2'  'item-3';
      // $list-space2: ('item-1'  'item-2'  'item-3');
      // $list-space3: ('item-1', 'item-2', 'item-3');

  // 3.列表嵌套

      // $list: ( 
      //   ('item-1.1', 'item-1.2', 'item-1.3'), 
      //   ('item-2.1', 'item-2.2', 'item-2.3'), 
      //   ('item-3.1', 'item-3.2', 'item-3.3')
      // );  //（推荐）

      // $list:  'item-1.1' 'item-1.2' 'item-1.3',
      //         'item-2.1' 'item-2.2' 'item-2.3',
      //         'item-3.1' 'item-3.2' 'item-3.3';


// scss语法4: Map (相当于js中的obj)
      // map: (
      //     (theme: dark, size: 40px),
      //     (theme: light, size: 32px)
      // );
      // map-keys($map) 返回map里面所有的key(list)
      // map-values($map) 返回map里面所有的value(list)
      // map-get($map, key) 返回map里面指定key的value


// scss语法5: @media 指令
  // @media 与 CSS 中几乎一样 增加允许其在 CSS 规则中嵌套 编译时 @media 将被编译到文件的最外层
      // .sidebar {
      //   width: 300px;
      //   @media screen and (orientation: landscape) {
      //     width: 500px;
      //   }
      // }
